" This file is autogenerated. DO NOT EDIT. Changes will be lost.
" Generator: vxlib/plugin.py
"if vxlib#plugin#StopLoading('_plugin_autogen_0b333f:f8e5')
"   finish
"endif


if !exists("g:vxlib_user_generated_plugins") || !g:vxlib_user_generated_plugins
 finish
endif

let s:exception_list = []

function! s:StrHas(ftrlist)
 let ftrs=split(a:ftrlist, ',')
 let hftrs=[]
 for f in ftrs
  call add(hftrs, (has(f) ? '+' : '-') . f)
 endfo
 return join(hftrs, ' ')
endfunc
function! s:Exception(throwpoint, exception, plugid, loadstatus)
 if a:loadstatus != 0
  call vxlib#plugin#SetLoaded(a:plugid, a:loadstatus)
 endif
 call add(s:exception_list, matchstr(a:throwpoint, ',\s*\zsline\s\+\d\+') . ' (' . a:plugid . '):')
 call add(s:exception_list, '   ' . a:exception)
 let g:VxPluginErrors[a:plugid] = a:exception
endfunc

function! s:CheckSetting(name, default)
 if !exists(a:name)
  exec 'let ' . a:name . '=' . a:default
 endif
endfunc

function! s:IsEnabled(name)
 return vxlib#plugin#IsEnabled(a:name)
endfunc

function! s:GetLoadStatus(name)
 return vxlib#plugin#GetLoadStatus(a:name)
endfunc

function! s:SetLoaded(name, value)
 return vxlib#plugin#SetLoaded(a:name, a:value)
endfunc

function! s:SetEnabledDefault(name, value)
 if ! has_key(g:VxPlugins, a:name) && ! exists("g:vxenabled_" . a:name)
  call vxlib#plugin#SetEnabled(a:name, a:value)
 endif
endfunc

function! s:ContinueLoading(name)
 if ! vxlib#plugin#IsEnabled(a:name)
  call vxlib#plugin#SetLoaded(a:name, -1)
 elseif ! vxlib#plugin#GetLoadStatus(a:name)
  return 1
 endif
 return 0
endfunc

" ================================
" Source: vxlib/cmd.vim
" START Plugin
let s:curplugin='vxlib_quickfixpreview'
if s:ContinueLoading(s:curplugin)
 if !(has('windows')&&has('quickfix'))
  call s:SetLoaded(s:curplugin, -2)
  let g:VxPluginMissFeatures[s:curplugin] = 'windows&&quickfix: ' . s:StrHas('quickfix,windows')
 else
  try        
   autocmd FileType qf call vxlib#cmd#PrepareQFixPreview()

   call s:SetLoaded(s:curplugin, 1)
  catch /.*/
   call s:Exception(v:throwpoint, v:exception, s:curplugin, -9)
  endtry
 endif
endif
" END Plugin

" ================================
for err in s:exception_list
 echoerr err
endfor
let s:exception_list = []
